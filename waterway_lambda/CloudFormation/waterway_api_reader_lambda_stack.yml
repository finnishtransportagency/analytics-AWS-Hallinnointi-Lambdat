Parameters:
    Env:
      Type: String
      Default: dev
      Description: Environment where everything is deployed to
      AllowedValues:
      - dev
      - qa
      - prod   
    TestBucket:
      Type: String
      Description: Testing output
      Default: aaa-oikeustestibuketti
    OutputBucket:
      Type: String
      Description: Lambda code bucket
      Default: vayla-file-load-bucket
    OutputFolder:
      Type: String
      Description: Folder where the lambdas output files are saved to (and where the initial code resides for now. Updated in github)
      Default: waterway
    AISBucket:
      Type: String
      Description: Bucket where geopointscompare can use this data easily.
      Default: ais-analytics-landing-bucket
    LambdaCodeBucket: 
      Type: String
      Description: Lambda code bucket
      Default: cloudformation-deployment-code-bucket
    LambdaCodeFolder: 
      Type: String
      Description: Lambda code folder in cloudformation-deployment-code-bucket
      Default: waterway
    LambdaName:
      Type: String
      Description: Name of the lambda-function
      Default: waterway_api_reader_lambda
    Administrator:
      Type: String
      Default: johannes.andelin@cgi.com
    Project:
      Type: String
      Default: AIS
      Description: Name of the project    
    Secret:
      Type: String
      Description: Secrets for waterway_api
      Default: waterway-api-secret
    ProdSubnetA:
      Type: String
      Default: subnet-0027e803ccca510f4
    ProdSubnetB:
      Type: String
      Default: subnet-020f2986dcbc67c1d
    ProdSubnetC:
      Type: String
      Default: subnet-0dacabe6c56d7b752
    ProdVPCid:
      Type: String
      Default: vpc-0e2f67b129c15b391
    DevSubnetA:
      Type: String
      Default: subnet-0038f2c3b105e03e9
    DevSubnetB:
      Type: String
      Default: subnet-02b8a92d92cf27b6e
    DevSubnetC:
      Type: String
      Default: subnet-0da5ced2715f64623
    DevVPCid:
      Type: String
      Default: vpc-07be1148af4bd484a
    SecretSuffixDev:
      Type: String
      Description: The suffix for secretname dev. To automate it according to env
      Default: BspfcS
    SecretSuffixProd:
      Type: String
      Description: The suffix for secretname prod. To automate it according to env
      Default: wOgp6h
    

Conditions:
  isDev: !Equals [ !Ref Env, "dev" ]
  isProd: !Equals [ !Ref Env, "prod" ]

Resources:
    WaterwayLambdaLogGroup:
      Type: "AWS::Logs::LogGroup"
      Properties:
        LogGroupName: !Sub "/aws/lambda/${LambdaName}-${Env}"
        Tags:
          - Key: Owner
            Value: CGI
  
    WaterwayExecutionRole:
      Type: "AWS::IAM::Role"
      Properties:        
        RoleName: !Sub "${LambdaName}-${Env}-role"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - "lambda.amazonaws.com"
              Action: "sts:AssumeRole"
        Path: "/"
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Policies:
        - PolicyName: !Sub "${LambdaName}-${Env}-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogStream"
                  - "logs:CreateLogGroup"
                  - "logs:PutLogEvents"
                Resource:
                  - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${LambdaName}-${Env}:*"
              - Effect: "Allow"
                Action:
                  - "s3:PutObject"
                  - "s3:GetObjectAcl"
                  - "s3:PutObjectAcl"
                Resource:
                  -  !Sub "arn:aws:s3:::${OutputBucket}-${Env}/*"
                  -  !Sub "arn:aws:s3:::${OutputBucket}-${Env}"
                  -  !Sub "arn:aws:s3:::${AISBucket}-${Env}/*"
                  -  !Sub "arn:aws:s3:::${AISBucket}-${Env}"
                  -  !Sub "arn:aws:s3:::${TestBucket}/*"
                  -  !Sub "arn:aws:s3:::${TestBucket}"
              - Effect: "Allow"
                Action:
                  - "secretsmanager:GetSecretValue"
                Resource:
                  - !If [isProd, !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${Secret}-${Env}-${SecretSuffixProd}",
                  !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${Secret}-${Env}-${SecretSuffixDev}"]        
        
    WaterwayPipelineSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupName: !Sub "${LambdaName}-${Env}"
        GroupDescription: Lambda Security Group for waterway pipeline
        VpcId: !If [isProd, !Ref "ProdVPCid", !Ref "DevVPCid"]
        SecurityGroupIngress:
          - CidrIp: 0.0.0.0/0
            IpProtocol: -1 
        SecurityGroupEgress:
          - CidrIp: 0.0.0.0/0
            IpProtocol: -1    

    WaterwayApiReaderLambda:
      Type: "AWS::Lambda::Function"
      Properties:
        Code:
          S3Bucket: !Sub "${LambdaCodeBucket}-${Env}"
          S3Key: !Sub "${OutputFolder}/${LambdaName}-${Env}.zip"
        Description: "Extracts data from waterway api, transforms it into csv and loads to s3 for ade"
        FunctionName: !Sub "${LambdaName}-${Env}"
        Handler: !Sub "${LambdaName}-${Env}.lambda_handler"
        MemorySize: 512
        PackageType: "Zip"
        Role: !GetAtt "WaterwayExecutionRole.Arn"
        Runtime: "python3.10"        
        VpcConfig:
            SecurityGroupIds:
              - !Ref "WaterwayPipelineSecurityGroup"
            SubnetIds:
              - !If [isProd, !Ref "ProdSubnetA", !Ref "DevSubnetA"]
              - !If [isProd, !Ref "ProdSubnetB", !Ref "DevSubnetB"]
              - !If [isProd, !Ref "ProdSubnetC", !Ref "DevSubnetC"]
        Timeout: 120
        Environment:
            Variables:
              secretname: !Sub "${Secret}-${Env}"
              target_bucket: !Sub "${OutputBucket}-${Env}"
              ais_bucket: !Sub "${AISBucket}-${Env}"
              dataset1: "vaylat"
              dataset2: "vaylaalueet"
              dataset3: "navigointilinjat"
              filter: "vaylaluokka=1,2,3,4,5,6"              
              test_bucket: !Sub "${TestBucket}"      
        Tags:
          - Key: Administrator
            Value: !Ref "Administrator"
          - Key: Project
            Value: !Ref "Project"
          - Key: Owner
            Value: CGI

    WaterwayApiReaderLambdaSchedule:
      Condition: isProd
      Type: AWS::Events::Rule
      Properties:
        Name: !Sub "${LambdaName}-${Env}-Schedule"
        ScheduleExpression: cron(0 19 * * ? *)
        State: ENABLED
        Targets:
          - Arn: !GetAtt WaterwayApiReaderLambda.Arn
            Id: !Sub "${LambdaName}-${Env}"

